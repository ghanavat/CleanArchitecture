{
  "x-generator": "NSwag v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Clean Architecture template",
    "description": "A template based on Clean Architecture rules. This template aims to show/help developers with setting up a solution based on Clean Architecture rules and guidelines.",
    "version": "v2"
  },
  "paths": {
    "/v2/player/{playerId}": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Get Player by ID\nIt has 'Authorize' attribute and API Versioning.",
        "operationId": "GetPlayerByIdAsync",
        "parameters": [
          {
            "name": "playerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK or BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Result<FilteredPlayerDto>"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [
              "SampleRole"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Result<FilteredPlayerDto>": {
        "type": "object",
        "description": "Result class.",
        "additionalProperties": false,
        "properties": {
          "data": {
            "description": "Data property of type  which holds the details of the result as a Json field.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilteredPlayerDto"
              }
            ]
          },
          "status": {
            "description": "Set is protected and accessible by derived classes",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ResultStatus"
              }
            ]
          },
          "error-messages": {
            "type": "array",
            "description": "Set is protected and accessible by derived classes",
            "items": {
              "type": "string"
            }
          },
          "validation-errors": {
            "type": "array",
            "description": "Set is protected and accessible by derived classes",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          },
          "success-message": {
            "type": "string",
            "description": "Set is protected and accessible by derived classes"
          }
        }
      },
      "FilteredPlayerDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "full-name": {
            "type": "string",
            "nullable": true
          },
          "is-deleted": {
            "type": "boolean"
          }
        }
      },
      "ResultStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Ok",
          "Error",
          "NotFound",
          "Invalid"
        ],
        "enum": [
          "ok",
          "error",
          "not-found",
          "invalid"
        ]
      },
      "ValidationError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "error-message": {
            "type": "string",
            "nullable": true
          },
          "error-code": {
            "type": "string",
            "nullable": true
          },
          "validation-error-type": {
            "$ref": "#/components/schemas/ValidationErrorType"
          }
        }
      },
      "ValidationErrorType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Error",
          "Warning",
          "Info"
        ],
        "enum": [
          "error",
          "warning",
          "info"
        ]
      }
    },
    "securitySchemes": {
      "SecuritySchemeName": {
        "type": "http",
        "description": "Place your valid JWT Bearer Token into the below Value box.",
        "name": "Authorization",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Player",
      "description": "Sample Controller for the Clean Architecture proposal"
    }
  ]
}